#------------------------------------------------------------------------------
#
#   システム名      :   医療情報システム
#
#   サブシステム名  :   共通ライブラリ
#
#   プログラム名    :   functions
#
#   モジュール名    :   functions.sh
#
#   処理内容        :   共通関数
#
#   注意事項        :
#
#   作成日(担当者)  :   2018/04/18(山脇)
#   修正日(担当者)  :
#
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#
#   関数名  : rotate_log
#
#   引  数  : 1) ログファイルパス
#             2) 最大ローテーション数
#
#   戻り値  : なし
#
#   内  容  : ログファイルのローテーション
#
#   詳　細  :
#
#------------------------------------------------------------------------------
function rotate_log() {
    # ログファイル
    local _logfile=$1
    # 最大ログ数
    if [ "$2" != "" ];then
        local _logmax=$2

    else
        local _logmax=9

    fi
    # ログローテーション
    if [ -e "${_logfile}" ];then
        # 最大ログ数
        local _idx1=${_logmax}
        # 過去ログのローテーション
        while [ ${_idx1} -gt 1 ]
        do
            local _idx2=$((_idx1 - 1))
            if [ -e "${_logfile}.${_idx2}" ];then
                mv -f ${_logfile}.${_idx2} ${_logfile}.${_idx1}

            fi
            _idx1=${_idx2}

        done
        # 最新ログのローテーション
        mv -f ${_logfile} ${_logfile}.${_idx1}

    fi

    # 正常終了
    return 0

}

#------------------------------------------------------------------------------
#
#   関数名  : check_pid
#
#   引  数  : 1) PIDファイルパス
#             2) プロセス名
#
#   戻り値  : 0 : 未実行
#             1 : 実行中
#
#   内  容  : プロセス実行中の判定
#
#   詳　細  :
#
#------------------------------------------------------------------------------
function check_pid() {
    # PIDファイル
    local _pid=$1
    # プロセス名
    if [ "$2" != "" ];then
        local _proc=$2

    else
        local _proc=$(basename $0)

    fi

    # PIDファイル判定
    if [ ! -e ${_pid} ];then
        # PIDファイルが無し
        local _comm=""

    else
        # プロセス実行中の判定
        while read _line
        do
            # プロセスIDの取得
            _comm=$(ps -p ${_line} -o pid=)
            # 抜ける
            break

        done < ${_pid}

    fi

    # プロセス実行判定
    if [ "${_comm}" = "" ];then
        # プロセス未実行
        return 0

    else
        # プロセス実行中
        return 1

    fi

}

#------------------------------------------------------------------------------
#
#   関数名  : put_log
#
#   引  数  : 1) ログファイルパス
#             2) ログ内容
#
#   戻り値  : 0 : 正常終了
#             1 : 異常終了
#
#   内  容  : ログファイルの書き込み
#
#   詳　細  :
#
#------------------------------------------------------------------------------
function put_log() {
    # 引数チェック
    if [ "$1" != "" ];then
        # ログファイル名
        local _logfile=$1
        # ログ内容
        local _logstr="$2"

        # 日付フォーマット
        local _now=`date '+%Y-%m-%d %T'`

        # ログ出力
        echo "${_now} [$$]:  INFO: ${_logstr}" >> ${_logfile}

        # 正常終了
        return 0

    else
        # 異常終了
        return 1

    fi

}

#------------------------------------------------------------------------------
#
#   関数名  : sec2time
#
#   引  数  : 1) 秒数
#
#   戻り値  : hh:mm:ss
#
#   内  容  : 秒をhh:mm:ssに変換
#
#   詳　細  :
#
#------------------------------------------------------------------------------
function sec2time() {
    # 引数チェック
    if [ "$1" != "" ];then
        # 秒数
        local _sec=$1

        # hh計算
        local _hh=$((_sec / 3600))
        if [ ${_hh} -lt 10 ];then
            _hh="0"${_hh}

        fi
        # mm計算
        _sec=$((_sec % 3600))
        local _mm=$((_sec / 60))
        if [ ${_mm} -lt 10 ];then
            _mm="0"${_mm}

        fi
        # ss計算
        local _ss=$((_sec % 60))
        if [ ${_ss} -lt 10 ];then
            _ss="0"${_ss}

        fi

        # 戻り値
        echo "${_hh}:${_mm}:${_ss}"

        # 正常終了
        return 0

    fi

}

#------------------------------------------------------------------------------
